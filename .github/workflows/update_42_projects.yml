name: üóìÔ∏è Actualizaci√≥n Diaria del Perfil 42

on:
  # Ejecuci√≥n programada: '0 3 * * *' se ejecuta a las 03:00 UTC todos los d√≠as.
  # Ajusta la hora cron para tu zona horaria. Por ejemplo:
  # - Para 1 AM CEST (UTC+2), usa '59 22 * * *' (10:59 PM UTC del d√≠a anterior).
  # - Para 3 AM CEST (UTC+2), usa '59 0 * * *' (12:59 AM UTC).
  schedule:
    - cron: '0 3 * * *'

  # Permite la ejecuci√≥n manual desde la pesta√±a 'Actions'
  workflow_dispatch:

jobs:
  run-script:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout del repositorio
        # Descarga el c√≥digo. fetch-depth: 0 es crucial para el paso de 'git push'.
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: üêç Configurar Python
        uses: actions/setup-python@v5
        with:
          # Usar una versi√≥n espec√≠fica de Python
          python-version: '3.11' 

      - name: üì¶ Instalar dependencias
        # Se asume que solo necesitas 'requests'. Si necesitas m√°s, a√±ade 'pip install -r requirements.txt'
        run: |
          pip install requests

      - name: ‚öôÔ∏è Ejecutar script de actualizaci√≥n (Crear√°/Actualizar√° token.json y README.md)
        env:
          # Estas variables se cargan desde los Secretos de GitHub.
          FT_CLIENT_ID: ${{ secrets.FT_CLIENT_ID }}
          FT_CLIENT_SECRET: ${{ secrets.FT_CLIENT_SECRET }}
        # üö® IMPORTANTE: Reemplaza 'update_readme.py' por el nombre real de tu script.
        run: python ./scripts/update_42_projects.py

      - name: üíæ Commit y Push de los cambios del README (Ignorando token.json)
        run: |
          # 1. Configurar la identidad del bot de GitHub Actions
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          
          # 2. A√±adir EXPLICITAMENTE solo el README.md a la zona de staging.
          # Esto evita que el token.json (que deber√≠a estar en .gitignore) sea a√±adido.
          git add README.md
          
          # 3. Verificar si realmente hay cambios en el README.md
          if git diff --cached --quiet; then
            echo "El README.md no ha cambiado. No se requiere commit."
          else
            # 4. Hacer commit y push solo si hay cambios.
            git commit -m "ü§ñ Actualizaci√≥n autom√°tica del progreso de 42."
            git push
          fi
